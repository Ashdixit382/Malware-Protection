import numpy as np
from flask import Flask, request, jsonify, render_template
import pickle
from tensorflow.keras.models import load_model
# Create flask app
flask_app = Flask(__name__)
model = load_model("my_model.h5") # change model name

@flask_app.route("/")
def Home():
    return render_template("index.html")

@flask_app.route("/predict", methods = ["POST"])
def predict():
    float_features = [int(x) for x in request.form.values()]
    
    # features = [np.array(float_features)]
    features = np.array(float_features).reshape(1, -1)
    console.log(float_features)
    prediction = model.predict(features)
    console.log(prediction);
    return render_template("index.html", prediction_text = "The file is {}".format(prediction[0][0]))

if __name__ == "__main__":
    flask_app.run(debug=True)


# import numpy as np
# from flask import Flask, request, jsonify, render_template
# import pickle
# from tensorflow.keras.models import load_model
# # Create flask app
# flask_app = Flask(__name__)
# model = load_model("my_model.h5")

# @flask_app.route("/")
# def Home():
#     return render_template("index.html")

# @flask_app.route("/predict", methods = ["POST"])
# def predict():
#     float_features = [int(x) for x in request.form.values()]
#     features = [np.array(float_features)]
#     prediction = model.predict(features)
#     return render_template("index.html", prediction_text = "The file is {}".format(prediction))

# if __name__ == "__main__":
#     flask_app.run(debug=True)


# import numpy as np
# from flask import Flask, request, jsonify, render_template
# import pickle
# from tensorflow.keras.models import load_model

# # Create flask app
# flask_app = Flask(__name__)

# # Load the saved model
# model = load_model("my_model.h5")


# if __name__ == "__main__":

#     @flask_app.route("/")  
#     def Home():
#       return render_template("index.html")


#     @flask_app.route("/predict", methods=["POST"])
#     def predict():
#         float_features = [int(x) for x in request.form.values()]
#         features = [np.array(float_features)]
#         prediction = model.predict(features)
#         return render_template("index.html", prediction_text="The file is {}".format(prediction))

#     flask_app.run(debug=True)